

stages:
  - build
  - test
  - package
  - image
  - deploy

variables:
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  REPOSITORY_NAME: remo-digitalbooking-repo-prod
  TEAM: remo
  APP: back

cache:
  paths:
    - back/digitalbooking/.m2/repository
    - back/digitalbooking/target

build job:
  stage: build
  script:
    - cd back/digitalbooking
    - mvn compile

# test job:
#   stage: test
#   script:
#     - cd back/digitalbooking
#     - mvn test #mvn clean test

# package job:
#   stage: package
#   artifacts:
#     paths:
#       - back/digitalbooking/target/*.jar #target/consoleapp.jar
#   script:
#     - cd back/digitalbooking
#     - mvn package

# build docker image:
#   stage: image
#   image:
#     name: amazon/aws-cli
#     entrypoint: [""]
#   services:
#     - docker:dind
#   before_script:
#     #- docker system prune
#     - amazon-linux-extras install docker
#     - aws --version
#     - docker --version
#   script:
#     - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
#     - docker build -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$APP_VERSION --cache-from $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest back/digitalbooking
#     - docker image ls
#     - docker push --all-tags $AWS_ECR_REGISTRY/$REPOSITORY_NAME
#     - echo $APP_VERSION
#     - | 
#         curl --location --request PUT --header "PRIVATE-TOKEN: $GITLAB_PERSONAL_ACCESS_TOKEN" \
#         --silent --output /dev/null --show-error --fail \
#         "https://gl.deitech.online/api/v4/projects/$CI_PROJECT_ID/variables/BACKEND_VERSION" --form "value=`echo $APP_VERSION`"
#   variables:
#     DOCKER_DRIVER: overlay

















# deploy job:
#     stage: deploy
#     image: alpine:3.11
#     before_script:
#         - apk update && apk add openssh-client bash
#         - mkdir -p ~/.ssh
#         - eval $(ssh-agent -s)
#         - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#         - touch ~/.ssh/config
#         - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#         - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
#     script:
#         - ssh ubuntu@DEPLOY_SERVER_IP "sudo apt-get update"
#         - ssh ubuntu@$DEPLOY_SERVER_IP "sudo apt install openjdk-8-jdk -y"
#         - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl stop consoleapp.service"
#         - scp ./target/consoleapp.jar ubuntu@$DEPLOY_SERVER_IP:~/console-app/
#         - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl start consoleapp.service"