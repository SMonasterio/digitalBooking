variables:
  REPOSITORY_NAME: remo-digitalbooking-repo-prod
  TEAM: remo
  APP: front

# cache:
#   paths:
#     - front/proyecto/node_modules

stages:
  - build
  - package
  - test
  - deploy

build project:
  stage: build
  image: node:16-alpine
  script:
    - cd front/proyecto
    - npm install --force
    - npm test
    - CI=false npm run build # Investigar 'CI=false'
    - echo $APP_VERSION > build/version.html
  artifacts:
    paths:
      - front/proyecto/build

# build docker image:
#   stage: package
#   image:
#     name: amazon/aws-cli
#     entrypoint: [""]
#   services:
#     - docker:dind
#   before_script:
#     - amazon-linux-extras install docker
#     - aws --version
#     - docker --version
#   script:
#     - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
#     - docker build -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$APP_VERSION --cache-from $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-latest front/proyecto
#     - docker image ls
#     - docker push --all-tags $AWS_ECR_REGISTRY/$REPOSITORY_NAME
#     - | 
#         curl --location --request PUT --header "PRIVATE-TOKEN: $GITLAB_PERSONAL_ACCESS_TOKEN" \
#         --silent --output /dev/null --show-error --fail \
#         "https://gl.deitech.online/api/v4/projects/$CI_PROJECT_ID/variables/FRONTEND_VERSION" --form "value=`echo $APP_VERSION`"
#   variables:
#     DOCKER_DRIVER: overlay




# test docker image:
#   stage: test
#   image: curlimages/curl
#   services:
#     - name: $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$TEAM-$APP-$CI_PIPELINE_IID
#       alias: frontend
#   script:
#     - curl http://frontend/version.html | grep $CI_PIPELINE_IID






# deploy to production:
#   image:
#     name: amazon/aws-cli:2.4.11
#     entrypoint: [""]
#   stage: deploy
#   variables:
#     APP_NAME: remo-digitalbooking-prod
#     APP_ENV_NAME: remo-digitalbooking-env-prod
#   environment: production
#   script:
#     - aws --version
#     - yum install -y gettext
#     - envsubst < front/proyecto/eb-templates/Dockerrun.aws.json > front/proyecto/Dockerrun.aws.json
#     - envsubst < front/proyecto/eb-templates/auth.json > front/proyecto/auth.json
#     - cat front/proyecto/Dockerrun.aws.json
#     - cat front/proyecto/auth.json
#     - aws s3 cp front/proyecto/Dockerrun.aws.json s3://$AWS_S3_BUCKET/remo/digitalbooking/front/dev/Dockerrun.aws.json
#     - aws s3 cp front/proyecto/auth.json s3://$AWS_S3_BUCKET/remo/digitalbooking/front/dev/auth.json
#     - aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $CI_PIPELINE_IID --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=remo/digitalbooking/front/dev/Dockerrun.aws.json
#     - aws elasticbeanstalk update-environment --application-name $APP_NAME --version-label $CI_PIPELINE_IID --environment-name $APP_ENV_NAME
#     - aws elasticbeanstalk wait environment-updated --application-name $APP_NAME --version-label $CI_PIPELINE_IID --environment-name $APP_ENV_NAME
#     - curl $CI_ENVIRONMENT_URL/version.html | grep $CI_PIPELINE_IID







# build docker image:
#   stage: docker
#   image: adoptopenjdk/openjdk11:alpine-jre
#   script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
#     - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION ./back/digitalbooking/ # The first tag points to our latest image
#     - docker image ls
#     - docker push --all-tags $CI_REGISTRY_IMAGE

# .npm_build:
#   image: node:10
#   script:
#     - npm install # Install all dependencies
#     - npm build # yarn build:${APP_ENV} # Build command
#   artifacts:
#     paths:
#       - ./build
#   only:
#     refs:
#       - main

# yarn_dev:
#   extends: .yarn_build
#   stage: build
#   before_script:
#     - export APP_ENV="dev"
#   only:
#     refs:
#       - develop

# yarn_prod:
#   extends: .yarn_build
#   stage: build
#   before_script:
#     - export APP_ENV="prod"
#   only:
#     refs:
#       - master
